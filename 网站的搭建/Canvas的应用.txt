         <canvas> 是 HTML5 新增的，一个可以使用脚本(通常为JavaScript)在其中绘制图像的 HTML 元素。它可以用来制作照片集或者制作简单(也不是那么简单)的
动画，甚至可以进行实时视频处理和渲染。
?	它最初由苹果内部使用自己MacOS X WebKit推出，供应用程序使用像仪表盘的构件和 Safari 浏览器使用。	后来
，有人通过Gecko内核的浏览器 (尤其是Mozilla和Firefox)，Opera和Chrome和超文本网络应用技术工作组建议为下一代的网络技术使用该元素。
?	
        Canvas是由HTML代码配合高度和宽度属性而定义出的可绘制区域。JavaScript代码可以访问该区域，类似于其他通用的二维API，通过一套完整的绘图
函数来动态生成图形。
?	Mozilla 程序从 Gecko 1.8 (Firefox 1.5)开始支持 <canvas>, Internet Explorer 从IE9开始<canvas> 。Chrome和
Opera 9+ 也支持 <canvas>。


<canvas>会创建一个固定大小的画布，会公开一个或多个 渲染上下文(画笔)，使用 渲染上下文来绘制和处理要展示的内容。

//基本模板
<html>
<head>
    <title>Canvas tutorial</title>
    <style type="text/css">
        canvas {
            border: 1px solid black;
        }
    </style>
</head>
<canvas id="tutorial" width="300" height="300"></canvas>
</body>
<script type="text/javascript">
    function draw(){
        var canvas = document.getElementById('tutorial');
     //检验预览器是否支持画布标签
        if(!canvas.getContext) return;
      	var ctx = canvas.getContext("2d");
      	//开始代码
        
    }
    draw();
</script>
</html>



beginPath()

新建一条路径，路径一旦创建成功，图形绘制命令被指向到路径上生成路径




moveTo(x, y)

把画笔移动到指定的坐标(x, y)。相当于设置路径的起始点坐标。




closePath()

闭合路径之后，图形绘制命令又重新指向到上下文中




stroke()

通过线条来绘制图形轮廓




fill()

通过填充路径的内容区域生成实心的图形

//绘制线段
function draw(){
    var canvas = document.getElementById('tutorial');
    if (!canvas.getContext) return;
    var ctx = canvas.getContext("2d");
    ctx.beginPath(); //新建一条path
    ctx.moveTo(50, 50); //把画笔移动到指定的坐标
    ctx.lineTo(200, 50);  //绘制一条从当前位置到指定坐标(200, 50)的直线.
    //闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做
    ctx.closePath();
    ctx.stroke(); //绘制路径。
}
draw();


//绘制三角形并且填充
<body>
    <canvas id="tutorial" width="300px" height="300"></canvas>
    <script type="text/javascript">
        function draw(){
         var canvas = document.getElementById('tutorial');
         if(!canvas.getContext) return;
         var ctx = canvas.getContext("2d");
         ctx.beginPath();
         ctx.moveTo(0,50);
         ctx.lineTo(200,50);
         ctx.lineTo(200,200);
         
         ctx.fill();
       
 
        }
        draw();
     </script>
</body>

//绘制圆弧
arc(x, y, r, startAngle, endAngle, anticlockwise):
以(x, y)为圆心，以r为半径，从 startAngle弧度开始到endAngle弧度结束。
anticlosewise是布尔值，true表示逆时针，false表示顺时针。(默认是顺时针)


